import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from debug_excel import AnalisadorExcel

class DashboardAnalise:
    def __init__(self):
        self.analisador = AnalisadorExcel("(JULIO) LISTAS INDIVIDUAIS.xlsx")
        self.dados = self.analisador.analisar_arquivo()
        self.metricas = self.analisador.colaboradores
        
    def gerar_alertas_desempenho(self, colaborador):
        """Gera alertas de desempenho para um colaborador espec√≠fico"""
        alertas = []
        metricas = self.metricas[colaborador]
        
        # Alerta de efici√™ncia
        media_eficiencia = np.mean([m['taxa_eficiencia'] for m in self.metricas.values()])
        if metricas['taxa_eficiencia'] < media_eficiencia * 0.8:
            alertas.append({
                'tipo': 'cr√≠tico',
                'mensagem': f'Efici√™ncia abaixo da m√©dia (atual: {metricas["taxa_eficiencia"]*100:.1f}%, m√©dia: {media_eficiencia*100:.1f}%)'
            })
            
        # Alerta de volume pendente
        if metricas['distribuicao_status'].get('PENDENTE', 0) > 650:
            alertas.append({
                'tipo': 'aten√ß√£o',
                'mensagem': f'Alto volume de casos pendentes: {metricas["distribuicao_status"].get("PENDENTE", 0)}'
            })
            
        # Alerta de tempo de resolu√ß√£o
        if metricas.get('tempo_medio_resolucao', 0) > 3:
            alertas.append({
                'tipo': 'aten√ß√£o',
                'mensagem': f'Tempo m√©dio de resolu√ß√£o alto: {metricas.get("tempo_medio_resolucao", 0):.1f} dias'
            })
            
        # Alerta de outliers
        if metricas['outliers'].get('tempo_resolucao', 0) > 10:
            alertas.append({
                'tipo': 'informativo',
                'mensagem': f'Alto n√∫mero de casos com tempo de resolu√ß√£o at√≠pico: {metricas["outliers"].get("tempo_resolucao", 0)}'
            })
            
        return alertas
    
    def gerar_recomendacoes(self, colaborador):
        """Gera recomenda√ß√µes personalizadas para um colaborador"""
        metricas = self.metricas[colaborador]
        recomendacoes = []
        
        # Recomenda√ß√µes baseadas na efici√™ncia
        if metricas['taxa_eficiencia'] < 0.03:
            recomendacoes.append({
                'area': 'Efici√™ncia',
                'recomendacao': 'Priorizar a resolu√ß√£o de casos mais antigos para melhorar a taxa de efici√™ncia',
                'acao': 'Estabelecer meta di√°ria de resolu√ß√£o de pelo menos 5 casos'
            })
            
        # Recomenda√ß√µes baseadas no tempo de resolu√ß√£o
        if metricas.get('tempo_medio_resolucao', 0) > 3:
            recomendacoes.append({
                'area': 'Tempo de Resolu√ß√£o',
                'recomendacao': 'Reduzir o tempo m√©dio de resolu√ß√£o dos casos',
                'acao': 'Identificar e eliminar gargalos no processo de an√°lise'
            })
            
        # Recomenda√ß√µes baseadas na distribui√ß√£o de status
        if metricas['distribuicao_status'].get('ANALISE', 0) > metricas['distribuicao_status'].get('VERIFICADO', 0):
            recomendacoes.append({
                'area': 'Fluxo de Trabalho',
                'recomendacao': 'Melhorar a convers√£o de casos em an√°lise para verificados',
                'acao': 'Revisar processo de an√°lise para identificar pontos de melhoria'
            })
            
        # Recomenda√ß√µes baseadas no padr√£o semanal
        if 'padrao_semanal' in metricas:
            dias = metricas['padrao_semanal']
            if max(dias.values()) / (sum(dias.values())/len(dias)) > 2:
                recomendacoes.append({
                    'area': 'Distribui√ß√£o de Trabalho',
                    'recomendacao': 'Melhorar a distribui√ß√£o do trabalho ao longo da semana',
                    'acao': 'Estabelecer metas di√°rias mais equilibradas'
                })
        
        return recomendacoes
    
    def criar_dashboard(self):
        st.set_page_config(page_title="Dashboard de An√°lise de Desempenho", layout="wide")
        st.title("Dashboard de An√°lise de Desempenho")
        
        # Sidebar para sele√ß√£o de colaborador
        colaborador = st.sidebar.selectbox(
            "Selecione o Colaborador",
            options=list(self.metricas.keys())
        )
        
        # Layout em colunas
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.header("M√©tricas Principais")
            metricas = self.metricas[colaborador]
            
            # Gr√°fico de distribui√ß√£o de status
            fig_status = px.pie(
                values=list(metricas['distribuicao_status'].values()),
                names=list(metricas['distribuicao_status'].keys()),
                title="Distribui√ß√£o de Status"
            )
            st.plotly_chart(fig_status)
            
            # Gr√°fico de tend√™ncia temporal
            if 'tendencias' in metricas:
                st.subheader("Tend√™ncia de Desempenho")
                st.write(f"Tend√™ncia: {'crescente' if metricas['tendencias'].get('slope', 0) > 0 else 'decrescente'}")
                st.write(f"R¬≤: {metricas['tendencias'].get('r_squared', 0):.2f}")
            
            # Gr√°fico de padr√£o semanal
            if 'padrao_semanal' in metricas:
                fig_semanal = px.bar(
                    x=list(metricas['padrao_semanal'].keys()),
                    y=list(metricas['padrao_semanal'].values()),
                    title="Distribui√ß√£o por Dia da Semana"
                )
                st.plotly_chart(fig_semanal)
        
        with col2:
            # Alertas
            st.header("Alertas de Desempenho")
            alertas = self.gerar_alertas_desempenho(colaborador)
            for alerta in alertas:
                if alerta['tipo'] == 'cr√≠tico':
                    st.error(alerta['mensagem'])
                elif alerta['tipo'] == 'aten√ß√£o':
                    st.warning(alerta['mensagem'])
                else:
                    st.info(alerta['mensagem'])
            
            # Recomenda√ß√µes
            st.header("Recomenda√ß√µes")
            recomendacoes = self.gerar_recomendacoes(colaborador)
            for rec in recomendacoes:
                with st.expander(f"üìå {rec['area']}"):
                    st.write(f"**Recomenda√ß√£o:** {rec['recomendacao']}")
                    st.write(f"**A√ß√£o Sugerida:** {rec['acao']}")
            
            # M√©tricas de efici√™ncia
            st.header("M√©tricas de Efici√™ncia")
            col_ef1, col_ef2 = st.columns(2)
            with col_ef1:
                st.metric(
                    "Taxa de Efici√™ncia",
                    f"{metricas['taxa_eficiencia']*100:.1f}%"
                )
            with col_ef2:
                if 'tempo_medio_resolucao' in metricas:
                    st.metric(
                        "Tempo M√©dio de Resolu√ß√£o",
                        f"{metricas['tempo_medio_resolucao']:.1f} dias"
                    )

if __name__ == "__main__":
    dashboard = DashboardAnalise()
    dashboard.criar_dashboard()
